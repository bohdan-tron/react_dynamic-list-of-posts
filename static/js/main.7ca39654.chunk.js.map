{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/commets.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","userPosts","postIdComments","setPostIdComments","fetchComments","setIsCommentsLoading","handleOpenComments","postId","a","Error","className","map","post","id","title","type","onClick","classNames","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postComment","newComment","deleteComment","commentId","Loader","NewCommentForm","postComments","setPostComments","useState","nameQuery","setNameQuery","emailQuery","setEmailQuery","textQuery","setTextQuery","isNameError","setIsNameError","isEmailError","setIsEmailError","isTextError","setIsTextError","commentIsOnLoading","setCommentIsOnLoading","inputsValidation","doneIds","randomId","result","Math","floor","random","some","res","push","handleAddComment","e","preventDefault","name","email","commentsArray","handleClearForm","useCallback","htmlFor","placeholder","value","onChange","event","target","required","PostDetails","isCommentError","isCommentsLoading","setIsNewComment","isNewComment","handleDeleteComment","filter","comment","handleNewComment","openedPost","find","length","href","UserSelector","setSelectedUser","userSelect","selectedUser","fetchPosts","setIsPostsLoading","isSelectorActive","setIsSelectorActive","handleUserClick","user","role","index","style","display","getUsers","getPosts","userId","App","setUserSelect","isPostError","setIsPostError","isPostsLoading","setUserPosts","setIsCommentError","fetchUsers","usersFromServer","postsFromServer","commentsFromServer","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ca39654.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  postIdComments: number | null;\n  setPostIdComments: (num: number | null) => void;\n  fetchComments: (id: number) => Promise<void>;\n  setIsCommentsLoading: (val: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  postIdComments,\n  setPostIdComments,\n  fetchComments,\n  setIsCommentsLoading,\n}) => {\n  const handleOpenComments = async (postId: number) => {\n    try {\n      if (postIdComments !== postId) {\n        setIsCommentsLoading(true);\n        setPostIdComments(postId);\n        await fetchComments(postId);\n        setIsCommentsLoading(false);\n      } else {\n        setPostIdComments(null);\n      }\n    } catch (error) {\n      throw new Error('trouble with uploading a comments');\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(post => {\n            return (\n              <tr\n                data-cy=\"Post\"\n                key={post.id}\n              >\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    onClick={() => handleOpenComments(post.id)}\n                    className={classNames(\n                      'button',\n                      'is-link',\n                      ({ 'is-light': postIdComments !== post.id }),\n                    )}\n                  >\n                    {postIdComments === post.id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = async (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = async (newComment: Comment) => {\n  return client.post('/comments', newComment);\n};\n\nexport const deleteComment = async (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { postComment } from '../api/commets';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postIdComments: number | null;\n  postComments: Comment[];\n  setPostComments: Dispatch<SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postIdComments,\n  postComments,\n  setPostComments,\n}) => {\n  const [nameQuery, setNameQuery] = useState('');\n  const [emailQuery, setEmailQuery] = useState('');\n  const [textQuery, setTextQuery] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isTextError, setIsTextError] = useState(false);\n  const [commentIsOnLoading, setCommentIsOnLoading] = useState(false);\n\n  const inputsValidation = async () => {\n    if (!nameQuery) {\n      setIsNameError(true);\n    }\n\n    if (!emailQuery) {\n      setIsEmailError(true);\n    }\n\n    if (!textQuery) {\n      setIsTextError(true);\n    }\n  };\n\n  const doneIds: number[] = [];\n  const randomId = () => {\n    const result: number = Math.floor(Math.random() * 1000);\n\n    if (doneIds.some(res => res === result)) {\n      doneIds.push(result + 1000);\n    } else {\n      doneIds.push(result);\n    }\n\n    return result;\n  };\n\n  const handleAddComment = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    inputsValidation();\n\n    try {\n      setCommentIsOnLoading(true);\n\n      if (postIdComments\n        && nameQuery\n        && emailQuery\n        && textQuery) {\n        const newComment: Comment = {\n          id: 0,\n          postId: postIdComments,\n          name: nameQuery,\n          email: emailQuery,\n          body: textQuery,\n        };\n\n        await postComment(newComment);\n\n        newComment.id = randomId();\n\n        const commentsArray = [...postComments, newComment];\n\n        setPostComments(commentsArray);\n      }\n    } catch (error) {\n      throw new Error('trouble with adding a comment');\n    } finally {\n      setCommentIsOnLoading(false);\n    }\n  };\n\n  const handleClearForm = useCallback(async () => {\n    setNameQuery('');\n    setEmailQuery('');\n    setTextQuery('');\n  }, []);\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              ({ 'is-danger': isNameError }),\n            )}\n            value={nameQuery}\n            onChange={(event) => {\n              setIsNameError(false);\n              setNameQuery(event.target.value);\n            }}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              ({ 'is-danger': isEmailError }),\n            )}\n            value={emailQuery}\n            onChange={(event) => {\n              setIsEmailError(false);\n              setEmailQuery(event.target.value);\n            }}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              ({ 'is-danger': isTextError }),\n            )}\n            value={textQuery}\n            onChange={(event) => {\n              setIsTextError(false);\n              setTextQuery(event.target.value);\n            }}\n            required\n          />\n        </div>\n\n        {isTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              ({ 'is-loading': commentIsOnLoading }),\n            )}\n            onClick={handleAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { deleteComment } from '../api/commets';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  isCommentError: boolean;\n  postComments: Comment[];\n  postIdComments: number | null;\n  userPosts: Post[];\n  setPostComments: Dispatch<SetStateAction<Comment[]>>;\n  isCommentsLoading: boolean;\n  isNewComment: boolean;\n  setIsNewComment: Dispatch<SetStateAction<boolean>>\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isCommentError,\n  postComments,\n  postIdComments,\n  userPosts,\n  setPostComments,\n  isCommentsLoading,\n  setIsNewComment,\n  isNewComment,\n}) => {\n  const handleDeleteComment = async (id: number) => {\n    deleteComment(id);\n    setPostComments(postComments.filter(comment => comment.id !== id));\n  };\n\n  const handleNewComment = async () => {\n    setIsNewComment(true);\n  };\n\n  const openedPost = userPosts.find(post => post.id === postIdComments);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {openedPost?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {openedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && (\n            <Loader />\n          )}\n\n          {!isCommentsLoading && isCommentError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isCommentsLoading && !isCommentError && postComments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map(comment => {\n                return (\n                  <article\n                    key={comment.id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          {!isCommentsLoading && !isCommentError && postComments.length < 1 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isNewComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleNewComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isNewComment && (\n          <NewCommentForm\n            postIdComments={postIdComments}\n            postComments={postComments}\n            setPostComments={setPostComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  setSelectedUser: (user: User) => void;\n  userSelect: User[];\n  selectedUser: User | null;\n  fetchPosts: (id: number) => void;\n  setIsPostsLoading: (value: boolean) => void;\n  setPostIdComments: (val: null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  setSelectedUser,\n  userSelect,\n  selectedUser,\n  fetchPosts,\n  setIsPostsLoading,\n  setPostIdComments,\n}) => {\n  const [isSelectorActive, setIsSelectorActive] = useState(false);\n\n  // const handleSelectorBlur = () => {\n  //   setIsSelectorActive(false);\n  // };\n\n  const handleDropdownClick\n  = () => {\n    setIsSelectorActive(!isSelectorActive);\n  };\n\n  const handleUserClick = async (user: User) => {\n    setPostIdComments(null);\n    setSelectedUser(user);\n    setIsSelectorActive(false);\n    setIsPostsLoading(true);\n    await fetchPosts(user.id);\n    setIsPostsLoading(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        ({ 'is-active': isSelectorActive }),\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdownClick}\n          // onBlur={handleSelectorBlur}\n        >\n          <span>\n            {selectedUser ? (\n              selectedUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {userSelect.map((user, index) => {\n            return (\n              <a\n                key={user.id}\n                style={{ display: isSelectorActive ? 'block' : 'none' }}\n                data-user={user.id}\n                href={`#user-${index + 1}`}\n                onClick={() => handleUserClick(user)}\n                className={classNames(\n                  'dropdown-item',\n                  ({ 'is-active': selectedUser === user }),\n                )}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n\nexport const getUsers = async () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = async (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { getComments } from './api/commets';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [userSelect, setUserSelect] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [isPostError, setIsPostError] = useState(false);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n\n  const [postIdComments, setPostIdComments] = useState<number | null>(null);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isCommentError, setIsCommentError] = useState(false);\n\n  const [isNewComment, setIsNewComment] = useState(false);\n\n  const fetchUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUserSelect(usersFromServer);\n    } catch (error) {\n      setIsPostError(true);\n    }\n  };\n\n  const fetchPosts = async (id: number) => {\n    try {\n      const postsFromServer = await getPosts(id);\n\n      setUserPosts(postsFromServer);\n    } catch (error) {\n      setIsPostError(true);\n    }\n  };\n\n  const fetchComments = async (id: number) => {\n    try {\n      const commentsFromServer = await getComments(id);\n\n      setPostComments(commentsFromServer);\n    } catch (error) {\n      setIsCommentError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  userSelect={userSelect}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  fetchPosts={fetchPosts}\n                  setIsPostsLoading={setIsPostsLoading}\n                  setPostIdComments={setPostIdComments}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isPostError ? (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                ) : (\n                  <>\n                    {!selectedUser && (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    )}\n\n                    {isPostsLoading && (\n                      <Loader />\n                    )}\n\n                    {selectedUser && !isPostsLoading && (\n                      (userPosts.length > 0) ? (\n                        <PostsList\n                          userPosts={userPosts}\n                          setPostIdComments={setPostIdComments}\n                          postIdComments={postIdComments}\n                          fetchComments={fetchComments}\n                          setIsCommentsLoading={setIsCommentsLoading}\n                        />\n                      ) : (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      )\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {postIdComments && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                ({ 'Sidebar--open': postIdComments }),\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  isCommentError={isCommentError}\n                  postComments={postComments}\n                  postIdComments={postIdComments}\n                  userPosts={userPosts}\n                  setPostComments={setPostComments}\n                  isCommentsLoading={isCommentsLoading}\n                  setIsNewComment={setIsNewComment}\n                  isNewComment={isNewComment}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}