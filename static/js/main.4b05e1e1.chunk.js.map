{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/commets.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","userPosts","postIdComments","setPostIdComments","fetchComments","setIsCommentsLoading","handleOpenComments","postId","a","Error","className","map","post","id","title","type","onClick","classNames","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postComment","newComment","deleteComment","commentId","Loader","NewCommentForm","postComments","setPostComments","useState","commentIsOnLoading","setCommentIsOnLoading","name","email","text","nameError","emailError","textError","query","setQuery","inputsValidation","doneIds","randomId","result","Math","floor","random","some","res","push","commentFormCleaning","handleAddComment","e","preventDefault","commentsArray","handleChange","event","inputName","target","inputValue","value","htmlFor","placeholder","onChange","required","PostDetails","isCommentError","isCommentsLoading","setIsNewComment","isNewComment","handleDeleteComment","filter","comment","handleNewComment","openedPost","find","commentsReady","length","thereIsNoComments","responseTrouble","href","UserSelector","setSelectedUser","userSelect","selectedUser","fetchPosts","setIsPostsLoading","isSelectorActive","setIsSelectorActive","handleUserClick","user","role","index","style","display","getUsers","getPosts","userId","App","setUserSelect","isPostError","setIsPostError","isPostsLoading","setUserPosts","areCommentsLoading","setAreCommentsLoading","setIsCommentError","fetchUsers","usersFromServer","postsFromServer","commentsFromServer","useEffect","postsReady","ReactDOM","render","document","getElementById"],"mappings":"uSAYaA,EAA6B,SAAC,GAMpC,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,cACAC,EACI,EADJA,qBAEMC,EAAkB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,kEAEnBN,IAAmBK,EAFA,uBAGrBF,GAAqB,GACrBF,EAAkBI,GAJG,SAKfH,EAAcG,GALC,OAMrBF,GAAqB,GANA,uBAQrBF,EAAkB,MARG,gEAWjB,IAAIM,MAAM,qCAXO,0DAAH,sDAexB,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGT,EAAUU,KAAI,SAAAC,GACb,OACE,qBACE,UAAQ,OADV,UAIE,oBAAI,UAAQ,SAAZ,SAAsBA,EAAKC,KAE3B,oBAAI,UAAQ,YAAZ,SACGD,EAAKE,QAGR,oBAAIJ,UAAU,8BAAd,SACE,wBACEK,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMV,EAAmBM,EAAKC,KACvCH,UAAWO,IACT,SACA,UACC,CAAE,WAAYf,IAAmBU,EAAKC,KAP3C,SAUGX,IAAmBU,EAAKC,GAAK,QAAU,aAnBvCD,EAAKC,gBCpDpBK,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WClC3Ba,EAAW,uCAAG,WAAO/B,GAAP,SAAAC,EAAA,+EAClB6B,EAAA,2BAA0C9B,KADxB,2CAAH,sDAIXgC,EAAW,uCAAG,WAAOC,GAAP,SAAAhC,EAAA,+EAClB6B,EAAY,YAAaG,IADP,2CAAH,sDAIXC,EAAa,uCAAG,WAAOC,GAAP,SAAAlC,EAAA,+EACpB6B,EAAA,oBAA2BK,KADP,2CAAH,sDCTbC,G,MAAS,kBACpB,qBAAKjC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,sBCYNkC,EAAkC,SAAC,GAIzC,IAHL1C,EAGI,EAHJA,eACA2C,EAEI,EAFJA,aACAC,EACI,EADJA,gBAEA,EAAoDC,oBAAS,GAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAA0BF,mBAAS,CACjCG,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,WAAW,EACXC,YAAY,EACZC,WAAW,IANb,mBAAOC,EAAP,KAAcC,EAAd,KASMC,EAAgB,uCAAG,sBAAAlD,EAAA,sDAClBgD,EAAMN,OACTM,EAAMH,WAAY,GAGfG,EAAMJ,OACTI,EAAMD,WAAY,GAGfC,EAAML,QACTK,EAAMF,YAAa,GAGrBG,EAAS,eAAKD,IAbS,2CAAH,qDAgBhBG,EAAoB,GACpBC,EAAW,WACf,IAAMC,EAAiBC,KAAKC,MAAsB,IAAhBD,KAAKE,UAQvC,OANIL,EAAQM,MAAK,SAAAC,GAAG,OAAIA,IAAQL,KAC9BF,EAAQQ,KAAKN,EAAS,KAEtBF,EAAQQ,KAAKN,GAGRA,GAGHO,EAAmB,uCAAG,sBAAA5D,EAAA,sDAC1BiD,EAAS,CACPP,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,WAAW,EACXC,YAAY,EACZC,WAAW,IAPa,2CAAH,qDAWnBc,EAAgB,uCAAG,WAAOC,GAAP,iBAAA9D,EAAA,yDACvB8D,EAAEC,iBACFb,IAFuB,SAKrBT,GAAsB,KAElB/C,GACCsD,EAAMN,MACNM,EAAML,OACNK,EAAMJ,MAVU,wBAWbZ,EAAsB,CAC1B3B,GAAI,EACJN,OAAQL,EACRgD,KAAMM,EAAMN,KACZC,MAAOK,EAAML,MACbtB,KAAM2B,EAAMJ,MAhBK,SAmBbb,EAAYC,GAnBC,OAqBnBA,EAAW3B,GAAK+C,IAEVY,EAvBa,sBAuBO3B,GAvBP,CAuBqBL,IAExCM,EAAgB0B,GAChBJ,IA1BmB,gEA6Bf,IAAI3D,MAAM,iCA7BK,yBA+BrBwC,GAAsB,GA/BD,6EAAH,sDAmChBwB,EACJ,SAACC,GAAgD,IAAD,EAC1CC,EAAYD,EAAME,OAAO1B,KACzB2B,EAAaH,EAAME,OAAOE,MAEhCrB,EAAS,2BACJD,GADG,uBAELmB,EAAYE,GAFP,wBAGFF,EAHE,UAGiB,GAHjB,MAgBV,OACE,uBAAM,UAAQ,iBAAd,UACE,sBAAKjE,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQqE,QAAQ,sBAAjC,yBAIA,sBAAKrE,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLmC,KAAK,OACLrC,GAAG,sBACHmE,YAAY,eACZtE,UAAWO,IACT,QACC,CAAE,YAAauC,EAAMH,YAExByB,MAAOtB,EAAMN,KACb+B,SAAUR,EACVS,UAAQ,IAGV,sBAAMxE,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGd8C,EAAMH,WACL,sBACE3C,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlB8C,EAAMH,WACL,mBAAG3C,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQqE,QAAQ,uBAAjC,0BAIA,sBAAKrE,UAAU,yCAAf,UACE,uBACEK,KAAK,OACLmC,KAAK,QACLrC,GAAG,uBACHmE,YAAY,iBACZtE,UAAWO,IACT,QACC,CAAE,YAAauC,EAAMF,aAExBwB,MAAOtB,EAAML,MACb8B,SAAUR,EACVS,UAAQ,IAGV,sBAAMxE,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGd8C,EAAMF,YACL,sBACE5C,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlB8C,EAAMF,YACL,mBAAG5C,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQqE,QAAQ,eAAjC,0BAIA,qBAAKrE,UAAU,UAAf,SACE,0BACEG,GAAG,eACHqC,KAAK,OACL8B,YAAY,oBACZtE,UAAWO,IACT,WACC,CAAE,YAAauC,EAAMD,YAExBuB,MAAOtB,EAAMJ,KACb6B,SA3GR,SAACP,GACDjB,EAAS,2BACJD,GADG,IAENJ,KAAMsB,EAAME,OAAOE,MACnBvB,WAAW,MAwGL2B,UAAQ,MAIX1B,EAAMD,WACL,mBAAG7C,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEK,KAAK,SACLL,UAAWO,IACT,SACA,UACC,CAAE,aAAc+B,IAEnBhC,QAASqD,EAPX,mBAaF,qBAAK3D,UAAU,UAAf,SAEE,wBACEK,KAAK,QACLL,UAAU,0BACVM,QAASoD,EAHX,4BC7OGe,EAA+B,SAAC,GAStC,IARLC,EAQI,EARJA,eACAvC,EAOI,EAPJA,aACA3C,EAMI,EANJA,eACAD,EAKI,EALJA,UACA6C,EAII,EAJJA,gBACAuC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,aAEMC,EAAmB,uCAAG,WAAO3E,GAAP,SAAAL,EAAA,sDAC1BiC,EAAc5B,GACdiC,EAAgBD,EAAa4C,QAAO,SAAAC,GAAO,OAAIA,EAAQ7E,KAAOA,MAFpC,2CAAH,sDAKnB8E,EAAgB,uCAAG,sBAAAnF,EAAA,sDACvB8E,GAAgB,GADO,2CAAH,qDAIhBM,EAAa3F,EAAU4F,MAAK,SAAAjF,GAAI,OAAIA,EAAKC,KAAOX,KAChD4F,GACHT,IAAsBD,GAAkBvC,EAAakD,OAAS,EAC3DC,GACHX,IAAsBD,GAAkBvC,EAAakD,OAAS,EAC3DE,GAAmBZ,GAAqBD,EAE9C,OACE,qBAAK1E,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,gBACGkF,QADH,IACGA,OADH,EACGA,EAAY9E,QAGf,mBAAG,UAAQ,WAAX,gBACG8E,QADH,IACGA,OADH,EACGA,EAAY/D,UAIjB,sBAAKnB,UAAU,QAAf,UACG2E,GACC,cAAC,EAAD,IAGDY,GACC,qBAAKvF,UAAU,yBAAyB,UAAQ,gBAAhD,kCAKDoF,GACC,qCACE,mBAAGpF,UAAU,aAAb,uBAECmC,EAAalC,KAAI,SAAA+E,GAChB,OACE,0BAEEhF,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBACEwF,KAAI,iBAAYR,EAAQvC,OACxB,UAAQ,gBAFV,SAIGuC,EAAQxC,OAEX,wBACE,UAAQ,gBACRnC,KAAK,SACLL,UAAU,kBACV,aAAW,SACXM,QAAS,kBAAMwE,EAAoBE,EAAQ7E,KAL7C,8BAWF,qBAAKH,UAAU,eAAe,UAAQ,cAAtC,SACGgF,EAAQ7D,SAvBN6D,EAAQ7E,UA+BtBmF,GACC,mBAAGtF,UAAU,aAAa,UAAQ,oBAAlC,8BAKA6E,GACA,wBACE,UAAQ,qBACRxE,KAAK,SACLL,UAAU,iBACVM,QAAS2E,EAJX,gCAWHJ,GACC,cAAC,EAAD,CACErF,eAAgBA,EAChB2C,aAAcA,EACdC,gBAAiBA,UCnHhBqD,EAAgC,SAAC,GAOvC,IANLC,EAMI,EANJA,gBACAC,EAKI,EALJA,WACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,kBACArG,EACI,EADJA,kBAEA,EAAgD4C,oBAAS,GAAzD,mBAAO0D,EAAP,KAAyBC,EAAzB,KAOMC,EAAe,uCAAG,WAAOC,GAAP,SAAApG,EAAA,6DACtBL,EAAkB,MAClBiG,EAAgBQ,GAChBF,GAAoB,GACpBF,GAAkB,GAJI,SAKhBD,EAAWK,EAAK/F,IALA,OAMtB2F,GAAkB,GANI,2CAAH,sDASrB,OACE,sBACE,UAAQ,eACR9F,UAAWO,IACT,WACC,CAAE,YAAawF,IAJpB,UAOE,qBAAK/F,UAAU,mBAAf,SACE,yBACEK,KAAK,SACLL,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdM,QA3BN,WACA0F,GAAqBD,IAqBjB,UAOE,+BACGH,EACCA,EAAapD,KAEb,kBAIJ,sBAAMxC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBACEA,UAAU,gBACVG,GAAG,gBACHgG,KAAK,OAHP,SAKE,qBAAKnG,UAAU,mBAAf,SACG2F,EAAW1F,KAAI,SAACiG,EAAME,GACrB,OACE,mBAEEC,MAAO,CAAEC,QAASP,EAAmB,QAAU,QAC/C,YAAWG,EAAK/F,GAChBqF,KAAI,gBAAWY,EAAQ,GACvB9F,QAAS,kBAAM2F,EAAgBC,IAC/BlG,UAAWO,IACT,gBACC,CAAE,YAAaqF,IAAiBM,IARrC,SAWGA,EAAK1D,MAVD0D,EAAK/F,eC7DboG,EAAQ,uCAAG,sBAAAzG,EAAA,+EACf6B,EAAmB,WADJ,2CAAH,qDCZR6E,EAAQ,uCAAG,WAAOC,GAAP,SAAA3G,EAAA,+EACf6B,EAAA,wBAAoC8E,KADrB,2CAAH,sDCcRC,EAAgB,WAC3B,MAAoCrE,mBAAiB,IAArD,mBAAOsD,EAAP,KAAmBgB,EAAnB,KACA,EAAwCtE,mBAAsB,MAA9D,mBAAOuD,EAAP,KAAqBF,EAArB,KAEA,EAAsCrD,oBAAS,GAA/C,mBAAOuE,EAAP,KAAoBC,EAApB,KACA,EAA4CxE,oBAAS,GAArD,mBAAOyE,EAAP,KAAuBhB,EAAvB,KACA,EAAkCzD,mBAAiB,IAAnD,mBAAO9C,EAAP,KAAkBwH,EAAlB,KAEA,EAA4C1E,mBAAwB,MAApE,mBAAO7C,EAAP,KAAuBC,EAAvB,KACA,EAAoD4C,oBAAS,GAA7D,mBAAO2E,EAAP,KAA2BC,EAA3B,KACA,EAAwC5E,mBAAoB,IAA5D,mBAAOF,EAAP,KAAqBC,EAArB,KACA,EAA4CC,oBAAS,GAArD,mBAAOqC,EAAP,KAAuBwC,EAAvB,KAEA,EAAwC7E,oBAAS,GAAjD,mBAAOwC,EAAP,KAAqBD,EAArB,KAEMuC,EAAU,uCAAG,4BAAArH,EAAA,+EAEeyG,IAFf,OAETa,EAFS,OAIfT,EAAcS,GAJC,gDAMfP,GAAe,GANA,yDAAH,qDAUVhB,GAAU,uCAAG,WAAO1F,GAAP,eAAAL,EAAA,+EAEe0G,EAASrG,GAFxB,OAETkH,EAFS,OAIfN,EAAaM,GAJE,gDAMfR,GAAe,GANA,yDAAH,sDAUVnH,GAAa,uCAAG,WAAOS,GAAP,eAAAL,EAAA,+EAEe8B,EAAYzB,GAF3B,OAEZmH,EAFY,OAIlBlF,EAAgBkF,GAJE,gDAMlBJ,GAAkB,GANA,yDAAH,sDAUnBK,qBAAU,WACRJ,MACC,IAEH,IAAMK,GAAa5B,IAAiBkB,EAEpC,OACE,sBAAM9G,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACE2F,WAAYA,EACZC,aAAcA,EACdF,gBAAiBA,EACjBG,WAAYA,GACZC,kBAAmBA,EACnBrG,kBAAmBA,MAIvB,qBAAKO,UAAU,QAAQ,UAAQ,cAA/B,SACG4G,EACC,qBACE5G,UAAU,yBACV,UAAQ,oBAFV,mCAOA,sCACI4F,GACA,mBAAG,UAAQ,iBAAX,8BAKDkB,GACC,cAAC,EAAD,IAGDU,KACEjI,EAAU8F,OAAS,EAClB,cAAC,EAAD,CACE9F,UAAWA,EACXE,kBAAmBA,EACnBD,eAAgBA,EAChBE,cAAeA,GACfC,qBAAsBsH,IAGxB,qBACEjH,UAAU,0BACV,UAAQ,aAFV,qCAcbR,GACC,qBACE,UAAQ,UACRQ,UAAWO,IACT,OACA,YACA,eACA,UACC,CAAE,gBAAiBf,IAPxB,SAUE,qBAAKQ,UAAU,gCAAf,SACE,cAAC,EAAD,CACE0E,eAAgBA,EAChBvC,aAAcA,EACd3C,eAAgBA,EAChBD,UAAWA,EACX6C,gBAAiBA,EACjBuC,kBAAmBqC,EACnBpC,gBAAiBA,EACjBC,aAAcA,gBCjJhC4C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4b05e1e1.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  postIdComments: number | null;\n  setPostIdComments: (num: number | null) => void;\n  fetchComments: (id: number) => Promise<void>;\n  setIsCommentsLoading: (val: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  postIdComments,\n  setPostIdComments,\n  fetchComments,\n  setIsCommentsLoading,\n}) => {\n  const handleOpenComments = async (postId: number) => {\n    try {\n      if (postIdComments !== postId) {\n        setIsCommentsLoading(true);\n        setPostIdComments(postId);\n        await fetchComments(postId);\n        setIsCommentsLoading(false);\n      } else {\n        setPostIdComments(null);\n      }\n    } catch (error) {\n      throw new Error('trouble with uploading a comments');\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(post => {\n            return (\n              <tr\n                data-cy=\"Post\"\n                key={post.id}\n              >\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    onClick={() => handleOpenComments(post.id)}\n                    className={classNames(\n                      'button',\n                      'is-link',\n                      ({ 'is-light': postIdComments !== post.id }),\n                    )}\n                  >\n                    {postIdComments === post.id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = async (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = async (newComment: Comment) => {\n  return client.post('/comments', newComment);\n};\n\nexport const deleteComment = async (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  // ChangeEventHandler,\n  Dispatch,\n  SetStateAction,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { postComment } from '../api/commets';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postIdComments: number | null;\n  postComments: Comment[];\n  setPostComments: Dispatch<SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postIdComments,\n  postComments,\n  setPostComments,\n}) => {\n  const [commentIsOnLoading, setCommentIsOnLoading] = useState(false);\n  const [query, setQuery] = useState({\n    name: '',\n    email: '',\n    text: '',\n    nameError: false,\n    emailError: false,\n    textError: false,\n  });\n\n  const inputsValidation = async () => {\n    if (!query.name) {\n      query.nameError = true;\n    }\n\n    if (!query.text) {\n      query.textError = true;\n    }\n\n    if (!query.email) {\n      query.emailError = true;\n    }\n\n    setQuery({ ...query });\n  };\n\n  const doneIds: number[] = [];\n  const randomId = () => {\n    const result: number = Math.floor(Math.random() * 1000);\n\n    if (doneIds.some(res => res === result)) {\n      doneIds.push(result + 1000);\n    } else {\n      doneIds.push(result);\n    }\n\n    return result;\n  };\n\n  const commentFormCleaning = async () => {\n    setQuery({\n      name: '',\n      email: '',\n      text: '',\n      nameError: false,\n      emailError: false,\n      textError: false,\n    });\n  };\n\n  const handleAddComment = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    inputsValidation();\n\n    try {\n      setCommentIsOnLoading(true);\n\n      if (postIdComments\n        && query.name\n        && query.email\n        && query.text) {\n        const newComment: Comment = {\n          id: 0,\n          postId: postIdComments,\n          name: query.name,\n          email: query.email,\n          body: query.text,\n        };\n\n        await postComment(newComment);\n\n        newComment.id = randomId();\n\n        const commentsArray = [...postComments, newComment];\n\n        setPostComments(commentsArray);\n        commentFormCleaning();\n      }\n    } catch (error) {\n      throw new Error('trouble with adding a comment');\n    } finally {\n      setCommentIsOnLoading(false);\n    }\n  };\n\n  const handleChange\n  = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputName = event.target.name;\n    const inputValue = event.target.value;\n\n    setQuery({\n      ...query,\n      [inputName]: inputValue,\n      [`${inputName}Error`]: false,\n    });\n  };\n\n  const handleTextareaChange\n  = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setQuery({\n      ...query,\n      text: event.target.value,\n      textError: false,\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              ({ 'is-danger': query.nameError }),\n            )}\n            value={query.name}\n            onChange={handleChange}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {query.nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {query.nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              ({ 'is-danger': query.emailError }),\n            )}\n            value={query.email}\n            onChange={handleChange}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {query.emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {query.emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              ({ 'is-danger': query.textError }),\n            )}\n            value={query.text}\n            onChange={handleTextareaChange}\n            required\n          />\n        </div>\n\n        {query.textError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              ({ 'is-loading': commentIsOnLoading }),\n            )}\n            onClick={handleAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={commentFormCleaning}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { deleteComment } from '../api/commets';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  isCommentError: boolean;\n  postComments: Comment[];\n  postIdComments: number | null;\n  userPosts: Post[];\n  setPostComments: Dispatch<SetStateAction<Comment[]>>;\n  isCommentsLoading: boolean;\n  isNewComment: boolean;\n  setIsNewComment: Dispatch<SetStateAction<boolean>>\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isCommentError,\n  postComments,\n  postIdComments,\n  userPosts,\n  setPostComments,\n  isCommentsLoading,\n  setIsNewComment,\n  isNewComment,\n}) => {\n  const handleDeleteComment = async (id: number) => {\n    deleteComment(id);\n    setPostComments(postComments.filter(comment => comment.id !== id));\n  };\n\n  const handleNewComment = async () => {\n    setIsNewComment(true);\n  };\n\n  const openedPost = userPosts.find(post => post.id === postIdComments);\n  const commentsReady\n  = !isCommentsLoading && !isCommentError && postComments.length > 0;\n  const thereIsNoComments\n  = !isCommentsLoading && !isCommentError && postComments.length < 1;\n  const responseTrouble = !isCommentsLoading && isCommentError;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {openedPost?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {openedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && (\n            <Loader />\n          )}\n\n          {responseTrouble && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {commentsReady && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map(comment => {\n                return (\n                  <article\n                    key={comment.id}\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleDeleteComment(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          {thereIsNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isNewComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleNewComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isNewComment && (\n          <NewCommentForm\n            postIdComments={postIdComments}\n            postComments={postComments}\n            setPostComments={setPostComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  setSelectedUser: (user: User) => void;\n  userSelect: User[];\n  selectedUser: User | null;\n  fetchPosts: (id: number) => void;\n  setIsPostsLoading: (value: boolean) => void;\n  setPostIdComments: (val: null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  setSelectedUser,\n  userSelect,\n  selectedUser,\n  fetchPosts,\n  setIsPostsLoading,\n  setPostIdComments,\n}) => {\n  const [isSelectorActive, setIsSelectorActive] = useState(false);\n\n  const handleDropdownClick\n  = () => {\n    setIsSelectorActive(!isSelectorActive);\n  };\n\n  const handleUserClick = async (user: User) => {\n    setPostIdComments(null);\n    setSelectedUser(user);\n    setIsSelectorActive(false);\n    setIsPostsLoading(true);\n    await fetchPosts(user.id);\n    setIsPostsLoading(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        ({ 'is-active': isSelectorActive }),\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdownClick}\n        >\n          <span>\n            {selectedUser ? (\n              selectedUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {userSelect.map((user, index) => {\n            return (\n              <a\n                key={user.id}\n                style={{ display: isSelectorActive ? 'block' : 'none' }}\n                data-user={user.id}\n                href={`#user-${index + 1}`}\n                onClick={() => handleUserClick(user)}\n                className={classNames(\n                  'dropdown-item',\n                  ({ 'is-active': selectedUser === user }),\n                )}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n\nexport const getUsers = async () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = async (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { getPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { getComments } from './api/commets';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [userSelect, setUserSelect] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [isPostError, setIsPostError] = useState(false);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n\n  const [postIdComments, setPostIdComments] = useState<number | null>(null);\n  const [areCommentsLoading, setAreCommentsLoading] = useState(false);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isCommentError, setIsCommentError] = useState(false);\n\n  const [isNewComment, setIsNewComment] = useState(false);\n\n  const fetchUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUserSelect(usersFromServer);\n    } catch (error) {\n      setIsPostError(true);\n    }\n  };\n\n  const fetchPosts = async (id: number) => {\n    try {\n      const postsFromServer = await getPosts(id);\n\n      setUserPosts(postsFromServer);\n    } catch (error) {\n      setIsPostError(true);\n    }\n  };\n\n  const fetchComments = async (id: number) => {\n    try {\n      const commentsFromServer = await getComments(id);\n\n      setPostComments(commentsFromServer);\n    } catch (error) {\n      setIsCommentError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const postsReady = selectedUser && !isPostsLoading;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  userSelect={userSelect}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  fetchPosts={fetchPosts}\n                  setIsPostsLoading={setIsPostsLoading}\n                  setPostIdComments={setPostIdComments}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isPostError ? (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                ) : (\n                  <>\n                    {!selectedUser && (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    )}\n\n                    {isPostsLoading && (\n                      <Loader />\n                    )}\n\n                    {postsReady && (\n                      (userPosts.length > 0) ? (\n                        <PostsList\n                          userPosts={userPosts}\n                          setPostIdComments={setPostIdComments}\n                          postIdComments={postIdComments}\n                          fetchComments={fetchComments}\n                          setIsCommentsLoading={setAreCommentsLoading}\n                        />\n                      ) : (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      )\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {postIdComments && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                ({ 'Sidebar--open': postIdComments }),\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  isCommentError={isCommentError}\n                  postComments={postComments}\n                  postIdComments={postIdComments}\n                  userPosts={userPosts}\n                  setPostComments={setPostComments}\n                  isCommentsLoading={areCommentsLoading}\n                  setIsNewComment={setIsNewComment}\n                  isNewComment={isNewComment}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}